# Best Practices for Aigrok Codebase

## 1. Configuration Management
- Always use [ConfigManager](cci:2://file:///Users/brooksc/Library/CloudStorage/Dropbox/py/aigrok/aigrok/config.py:37:0-595:110) class for handling configuration
- Never hardcode API keys or endpoints
- Use environment variables for sensitive data
- Follow provider-specific configuration patterns
- When updating configurations:
  ```python
  # TODO(config): Update provider X configuration
  # - Add new endpoint parameter
  # - Update validation logic
  # - Add migration for existing configs
  ```

## 2. Model Selection
- Respect model capabilities (text/vision/audio)
- Always validate model availability before use
- Handle Ollama models differently as they're dynamic
- Consider model costs and capabilities when selecting
- When adding new model support:
  ```python
  # TODO(models): Implement provider Y support
  # - Add capability validation
  # - Implement model listing
  # - Add cost tracking
  # - Update tests
  ```

## 3. Error Handling
- Use proper exception handling with specific error types
- Provide clear error messages to users
- Log errors using the `loguru` logger
- Fail gracefully and provide recovery options
- Before updating error handling:
  ```python
  # TODO(errors): Enhance error handling for Z
  # - Add new exception types
  # - Update error messages
  # - Add recovery procedures
  # - Document new errors
  ```

## 4. Code Organization
- Keep provider-specific code in separate methods
- Use type hints consistently
- Follow the established class structure
- Use pydantic models for data validation

## 5. API Interaction
- Verify API access before using services
- Use official SDKs when available
- Handle rate limits and quotas appropriately
- Cache results when possible

## 6. Security
- Never commit API keys
- Use secure methods for storing credentials
- Validate user input
- Follow least privilege principle

## 7. Testing
- Write tests for new functionality
- Test with different model providers
- Include error cases in tests
- Mock external API calls in tests

## 8. Documentation
- Keep docstrings up to date
- Document provider-specific behaviors
- Update README with new features
- Include examples for complex functionality

## 9. Performance
- Minimize API calls
- Use async where appropriate
- Cache model lists and configurations
- Handle large files efficiently

## 10. User Experience
- Provide clear prompts and feedback
- Handle configuration gracefully
- Allow for easy provider switching
- Make error messages actionable

## 11. Code Preservation
- Never remove functionality without explicit user approval
- Keep existing code paths intact unless specifically asked to change them
- Document any code that seems unused before suggesting removal
- When refactoring, preserve all existing behavior
- If suggesting code removal, first show what would be removed and why

## 12. Specification Management
- Always update spec before implementing changes
- When user requests new features:
  1. First propose spec updates
  2. Get user approval
  3. Then implement changes
- Keep spec in sync with codebase
- Document API changes in spec
- Track breaking changes in spec

## 13. Testing Strategy
### Example Test Structure:
```python
# Configuration Tests
def test_ollama_endpoint_configuration():
    """Test Ollama endpoint configuration scenarios"""
    # Test default endpoint (localhost:11434)
    # Test custom endpoint
    # Test invalid endpoint
    # Test connection timeout
    
def test_model_capability_filtering():
    """Test model filtering by capability"""
    # Test text model filtering
    # Test vision model filtering
    # Test audio model filtering
    # Test invalid capability handling
    
def test_api_key_verification():
    """Test API key verification for providers"""
    # Test valid keys
    # Test invalid keys
    # Test expired keys
    # Test rate limiting
```

## 14. Change Management
- Document all significant changes
- Update HISTORY.md with changes
- Track breaking changes
- Provide migration guides
- Version API changes appropriately

## 15. Documentation Updates
- Keep README in sync with changes
- Update API documentation
- Document new configuration options
- Provide examples for new features

## 16. Code Update Procedures
### Spec Updates
Before making code changes:
1. Create a specification update document:
   ```markdown
   # Specification Update: [Feature Name]
   ## Current Behavior
   - Document existing functionality
   
   ## Proposed Changes
   - List all changes
   - Include API modifications
   - Note breaking changes
   
   ## Implementation Plan
   - List required code changes
   - Note affected modules
   - Identify test requirements
   ```

2. Add TODOs in code:
   ```python
   # TODO(spec): Update provider interface
   # Current: ProviderAPI.list_models()
   # Update to: ProviderAPI.list_models(capability: Optional[str])
   # Changes needed:
   # - Update interface definition
   # - Modify all provider implementations
   # - Update tests
   # - Update documentation
   ```

### Code Implementation
After spec approval:
1. Add implementation TODOs:
   ```python
   # TODO(implementation): Add capability filtering
   # Steps:
   # 1. Update ProviderAPI class
   # 2. Implement in each provider
   # 3. Add tests
   # 4. Update docs
   ```

2. Track changes:
   ```python
   # TODO(tracking): Document changes
   # - Update HISTORY.md
   # - Update API docs
   # - Add migration guide if needed
   ```

### Testing Updates
Before completing implementation:
```python
# TODO(tests): Add new test cases
# Required:
# - Unit tests for capability filtering
# - Integration tests with providers
# - Error case testing
# - Performance impact tests
```

### Documentation Updates
Before marking as complete:
```python
# TODO(docs): Update documentation
# - Update README.md
# - Update API documentation
# - Add examples
# - Update changelog
```