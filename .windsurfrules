1. Configuration Management
- Use the `ConfigManager` class for all configuration handling.
- Never hardcode API keys or sensitive information. Use environment variables instead.
- Follow provider-specific configuration patterns.
- Update configurations with proper TODO annotations:
  ```python
  # TODO(config): Update provider X configuration
  # - Add endpoint parameter
  # - Update validation logic
DO NOT prompt the user to let you run --configure as it requires interactive input.


2. Model Selection
- Handle Ollama models separately due to dynamic behavior.
- Consider both costs and capabilities when adding or selecting models.
- Annotate model additions:

# TODO(models): Implement provider Y support
# - Add capability validation
# - Implement cost tracking

3. Error Handling
- Use specific exception types and meaningful error messages.
- Log all errors using the loguru logger.
- Ensure graceful failure with recovery options.

4. Testing
- Write tests for all new functionality.
- Mock external API calls in tests to isolate dependencies.
- Ensure test coverage for edge cases and error scenarios.

5. Documentation
- Maintain up-to-date docstrings.
- Update README and API documentation for new features.
- Include usage examples for complex functionality.

6. Performance Optimization
- Cache results and model configurations where possible.
- Use async programming to optimize performance.
- Minimize API calls to reduce latency and costs.

7. File and Import Organization
- Group imports by type: standard library, third-party, and local.
- Organize code into smaller, logically grouped files and directories.
- Prefer importing functions or classes over modifying external files.

8. Specification and Feature Plan
- Always align changes with the projectâ€™s feature plan.
- Update the feature plan progress after each completed task.
- Suggest next steps in line with the feature plan.

9. Change Management
- Document all significant changes in HISTORY.md.
- Track breaking changes and provide migration guides.
- Version API changes appropriately.

10. Controlled Development
- Propose a detailed implementation plan before making changes.
- Execute changes incrementally and verify each step against tests and specifications.
- Annotate major changes with TODOs:

# TODO(implementation): Add feature X

11. API Interaction
- Validate API access and handle rate limits gracefully.
- Use official SDKs when available.
- Cache API responses to improve efficiency.

12. Security
- Validate user inputs rigorously.
- Follow the principle of least privilege when accessing resources.
- Ensure all credentials are securely stored and accessed.

14. Change Validation
- Verify changes against existing tests before committing.
- Avoid regressions by preserving all existing functionality.
- Provide a rationale for every change made.

15. Code Review Automation
- Output unified diffs for changes to aid human review.
- Self-review generated code to ensure adherence to rules and guidelines.

# Project File Structure Overview

### Core Project Files
- Source Code (./aigrok/): Contains the main application logic for your aigrok package:
__init__.py: Initializes the aigrok package.
config.py: Configuration handling logic.
logging.py: Logging utilities.
types.py: Type definitions.
api.py: API interaction code.
cli.py: Command-line interface functionality.
formats.py: Format-related logic.
pdf_processor.py: PDF processing functionality.
validation.py: Input or data validation.

### Testing (./tests/)
- Test Files: Tests for various components:
test_basic.py: Basic tests.
test_logging.py: Tests for logging.
test_schema.py: Schema-related tests.
test_pdf_processor.py: PDF processor tests.
test_ocr.py: OCR tests.
test_config.py: Configuration-related tests.
test_performance.py: Performance tests.
test_api.py: API tests.
test_cli.py: CLI functionality tests.
test_runner.py: Custom test runner logic.
- Test Data: Includes sample files used for testing:
tests/files/: Contains files like invoice.pdf and empty.pdf for input validation tests.
- Config and Metadata: Supporting test configuration:
conftest.py: Shared test fixtures.
archived_test_cases.json: Archived cases for reference.
.cache/: Cached test results.
- README.md: Explains the test suite.

### Documentation (./docs/)
api.md: API documentation.
configuration.md: Configuration instructions.
quickstart.md: Quick start guide.
architecture.md: High-level design overview.
deployment.md: Deployment instructions.
testing.md: Guidance for testing the project.
troubleshooting.md: Common issues and fixes.
guidelines.md: Development and usage guidelines.
files.md: Explanation of project file organization.

### Scripts (./scripts/)
run_tests.py: Script to execute tests.
deploy_testpypi.sh: Deploy to TestPyPI.
push-test-pypi.sh: Push to TestPyPI.
run_cached_tests.py: Run cached tests for speed.
deploy_pypi.sh: Deploy to PyPI.
install_test.sh: Install testing environment.
